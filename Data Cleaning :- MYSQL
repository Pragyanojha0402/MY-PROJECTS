-- Select all data from the layoffs_std table to review the current state
select * 
from layoffs_std;

-- Create a new table layoffs_std with the same structure as layoffs
create table layoffs_std
like layoffs;

-- Insert all the data from the original layoffs table into the new layoffs_std table
insert into layoffs_std
select *
from layoffs;

-- Select all data from layoffs_std and add a row number to identify duplicates
-- Partitioning is done by company, location, industry, total_laid_off, date, etc.
select *,
row_number() over(
partition by company, location, industry, total_laid_off, `date`, 
percentage_laid_off, stage, country, funds_raised_millions) as row_num
from layoffs_std;

-- Use a Common Table Expression (CTE) to select duplicates based on the same partitioning
with duplicate_cte as 
( 
select *,
row_number() over(
partition by company, location, industry, total_laid_off, `date`, 
percentage_laid_off, stage, country, funds_raised_millions) as row_num
from layoffs_std
)
-- Select only the rows with row_num greater than 1, indicating duplicates
select *
from duplicate_cte
where row_num >1;

-- Create a new table layoffs_std2 with additional row_num column to track duplicates
CREATE TABLE `layoffs_std2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Select rows from layoffs_std2 where row_num is greater than 1 (duplicates)
select *
from layoffs_std2
where row_num >1;

-- Insert all rows from layoffs_std into layoffs_std2 along with row_num for duplicate identification
insert into layoffs_std2
select *,
row_number() over(
partition by company, location, industry, total_laid_off, `date`, 
percentage_laid_off, stage, country, funds_raised_millions) as row_num
from layoffs_std;

-- Select all data from layoffs_std2 for review
select*
from layoffs_std2;

-- Example comment on how STR_TO_DATE is used to convert string date format to MySQL date format
-- Convert the date from string format to actual date format
update layoffs_std2
set `date` = str_to_date(`date`, '%m/%d/%Y');

-- Standardize the industry column by updating all 'crypto%' entries to just 'crypto'
update layoffs_std2
set industry = 'crypto'
where industry like 'crypto%';

-- Clean up the country column by removing trailing dots in 'united states.'
update layoffs_std2
set country = trim(trailing '.' from country)
where country like 'united states%';

-- Modify the date column in layoffs_std2 to have the proper MySQL date data type
alter table layoffs_std2
modify column `date` date;

-- Select rows where total_laid_off and percentage_laid_off are null for data validation
select *
from layoffs_std2
where total_laid_off is null 
and percentage_laid_off is null;

-- Select rows where industry is either null or empty string, another data validation check
select *
from layoffs_std2
where industry is null
or industry = '';

-- Identify missing industry values by joining with records where the industry is not null
select t1.industry, t2.industry
from layoffs_std2 t1
join layoffs_std2 t2
on t1.company = t2.company
where (t1.industry is null or t1.industry = '')
and t2.industry is not null;

-- Update the missing industry values by copying from another record with the same company name
update layoffs_std2 t1
join layoffs_std2 t2
on t1.company = t2.company
set t1.industry = t2.industry
where t1.industry is null 
and t2.industry is not null;

-- Set any remaining empty string industry values to null
update layoffs_std2
set industry = null
where industry = '';

-- Select all records where the company is 'Airbnb' for focused review
select *
from layoffs_std2
where company ='airbnb';

-- Select all data from layoffs_std2 after cleaning
select *
from layoffs_std2;

-- Delete records where both total_laid_off and percentage_laid_off are null, likely incomplete data
delete
from layoffs_std2
where total_laid_off is null 
and percentage_laid_off is null;

-- Drop the row_num column as it was used only for identifying duplicates and is no longer needed
alter table layoffs_std2
drop column row_num;
